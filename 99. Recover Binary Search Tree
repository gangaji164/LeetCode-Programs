/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        if(!root) return;

        TreeNode* first=nullptr;
        TreeNode* second=nullptr;
        vector<TreeNode*> seq;
        inorder(root,seq);
        int n=seq.size();

        for(int i=0;i<n-1;i++){
            if(seq[i]->val > seq[i+1]->val){
                if(!first)first=seq[i];
                    second=seq[i+1];
                
            }
        }
    
            if(first && second){
                int temp=first->val;
                first->val=second->val;
                second->val=temp;
            
        
            }
    }
    void inorder(TreeNode* node,vector<TreeNode*>&seq){
        if(!node) return;
        inorder(node->left,seq);
        seq.push_back(node);
        inorder(node->right,seq);

    }
};
