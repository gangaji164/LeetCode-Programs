/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
       
        if(!head || !head->next) return true;
        ListNode *slow=head;
        ListNode* fast=head;
        while(fast&& fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode* secondHalf = reverseList(slow);

    ListNode* p1=head;
    ListNode* p2=secondHalf;
    while(p2){
      if(p1->val!=p2->val){
        reverseList(secondHalf);
        return false;
      

}   
    p1=p1->next;
    p2=p2->next;
    }
    reverseList(secondHalf);
    return true;
    
}
private:
ListNode* reverseList(ListNode*head){
    ListNode* prev=nullptr;
    ListNode* curr=head;
    while(curr){
        ListNode* nextnode=curr->next;
        curr->next=prev;
        prev=curr;
        curr=nextnode;
    }
    return prev;
}
};
