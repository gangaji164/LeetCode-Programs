/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void inorder(TreeNode* root, vector<int>&v){
    if(!root)return;
    inorder(root->left,v);
    v.push_back(root->val);
    inorder(root->right,v);

}
vector<int>merge(vector<int>&a,vector<int>&b){
    vector<int>merge;
    int i=0,j=0;
    while(i<a.size()&& j<b.size()){
        if(a[i]<b[j]) merge.push_back(a[i++]);
        else{
            merge.push_back(b[j++]);
        }
    }
        while(i<a.size()) merge.push_back(a[i++]);
        while(j<b.size())merge.push_back(b[j++]);
    
    return merge;

}
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int>a,b;

        inorder(root1,a);
        inorder(root2,b);
        
        return merge(a,b);
    }
};
